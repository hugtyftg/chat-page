/*!****************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[12].oneOf[12].use[2]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[12].oneOf[12].use[3]!./styles/globals.css ***!
  \****************************************************************************************************************************************************************************************************************************************************************/
/*
! tailwindcss v3.3.5 | MIT License | https://tailwindcss.com
*//*
1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)
2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)
*/

*,
::before,
::after {
  box-sizing: border-box; /* 1 */
  border-width: 0; /* 2 */
  border-style: solid; /* 2 */
  border-color: #e5e7eb; /* 2 */
}

::before,
::after {
  --tw-content: '';
}

/*
1. Use a consistent sensible line-height in all browsers.
2. Prevent adjustments of font size after orientation changes in iOS.
3. Use a more readable tab size.
4. Use the user's configured `sans` font-family by default.
5. Use the user's configured `sans` font-feature-settings by default.
6. Use the user's configured `sans` font-variation-settings by default.
*/

html {
  line-height: 1.5; /* 1 */
  -webkit-text-size-adjust: 100%; /* 2 */
  -moz-tab-size: 4; /* 3 */
  -o-tab-size: 4;
     tab-size: 4; /* 3 */
  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"; /* 4 */
  font-feature-settings: normal; /* 5 */
  font-variation-settings: normal; /* 6 */
}

/*
1. Remove the margin in all browsers.
2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.
*/

body {
  margin: 0; /* 1 */
  line-height: inherit; /* 2 */
}

/*
1. Add the correct height in Firefox.
2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)
3. Ensure horizontal rules are visible by default.
*/

hr {
  height: 0; /* 1 */
  color: inherit; /* 2 */
  border-top-width: 1px; /* 3 */
}

/*
Add the correct text decoration in Chrome, Edge, and Safari.
*/

abbr:where([title]) {
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
}

/*
Remove the default font size and weight for headings.
*/

h1,
h2,
h3,
h4,
h5,
h6 {
  font-size: inherit;
  font-weight: inherit;
}

/*
Reset links to optimize for opt-in styling instead of opt-out.
*/

a {
  color: inherit;
  text-decoration: inherit;
}

/*
Add the correct font weight in Edge and Safari.
*/

b,
strong {
  font-weight: bolder;
}

/*
1. Use the user's configured `mono` font family by default.
2. Correct the odd `em` font sizing in all browsers.
*/

code,
kbd,
samp,
pre {
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; /* 1 */
  font-size: 1em; /* 2 */
}

/*
Add the correct font size in all browsers.
*/

small {
  font-size: 80%;
}

/*
Prevent `sub` and `sup` elements from affecting the line height in all browsers.
*/

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/*
1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)
2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)
3. Remove gaps between table borders by default.
*/

table {
  text-indent: 0; /* 1 */
  border-color: inherit; /* 2 */
  border-collapse: collapse; /* 3 */
}

/*
1. Change the font styles in all browsers.
2. Remove the margin in Firefox and Safari.
3. Remove default padding in all browsers.
*/

button,
input,
optgroup,
select,
textarea {
  font-family: inherit; /* 1 */
  font-feature-settings: inherit; /* 1 */
  font-variation-settings: inherit; /* 1 */
  font-size: 100%; /* 1 */
  font-weight: inherit; /* 1 */
  line-height: inherit; /* 1 */
  color: inherit; /* 1 */
  margin: 0; /* 2 */
  padding: 0; /* 3 */
}

/*
Remove the inheritance of text transform in Edge and Firefox.
*/

button,
select {
  text-transform: none;
}

/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Remove default button styles.
*/

button,
[type='button'],
[type='reset'],
[type='submit'] {
  -webkit-appearance: button; /* 1 */
  background-color: transparent; /* 2 */
  background-image: none; /* 2 */
}

/*
Use the modern Firefox focus style for all focusable elements.
*/

:-moz-focusring {
  outline: auto;
}

/*
Remove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)
*/

:-moz-ui-invalid {
  box-shadow: none;
}

/*
Add the correct vertical alignment in Chrome and Firefox.
*/

progress {
  vertical-align: baseline;
}

/*
Correct the cursor style of increment and decrement buttons in Safari.
*/

::-webkit-inner-spin-button,
::-webkit-outer-spin-button {
  height: auto;
}

/*
1. Correct the odd appearance in Chrome and Safari.
2. Correct the outline style in Safari.
*/

[type='search'] {
  -webkit-appearance: textfield; /* 1 */
  outline-offset: -2px; /* 2 */
}

/*
Remove the inner padding in Chrome and Safari on macOS.
*/

::-webkit-search-decoration {
  -webkit-appearance: none;
}

/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Change font properties to `inherit` in Safari.
*/

::-webkit-file-upload-button {
  -webkit-appearance: button; /* 1 */
  font: inherit; /* 2 */
}

/*
Add the correct display in Chrome and Safari.
*/

summary {
  display: list-item;
}

/*
Removes the default spacing and border for appropriate elements.
*/

blockquote,
dl,
dd,
h1,
h2,
h3,
h4,
h5,
h6,
hr,
figure,
p,
pre {
  margin: 0;
}

fieldset {
  margin: 0;
  padding: 0;
}

legend {
  padding: 0;
}

ol,
ul,
menu {
  list-style: none;
  margin: 0;
  padding: 0;
}

/*
Reset default styling for dialogs.
*/
dialog {
  padding: 0;
}

/*
Prevent resizing textareas horizontally by default.
*/

textarea {
  resize: vertical;
}

/*
1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)
2. Set the default placeholder color to the user's configured gray 400 color.
*/

input::-moz-placeholder, textarea::-moz-placeholder {
  opacity: 1; /* 1 */
  color: #9ca3af; /* 2 */
}

input::placeholder,
textarea::placeholder {
  opacity: 1; /* 1 */
  color: #9ca3af; /* 2 */
}

/*
Set the default cursor for buttons.
*/

button,
[role="button"] {
  cursor: pointer;
}

/*
Make sure disabled buttons don't get the pointer cursor.
*/
:disabled {
  cursor: default;
}

/*
1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)
2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)
   This can trigger a poorly considered lint error in some tools but is included by design.
*/

img,
svg,
video,
canvas,
audio,
iframe,
embed,
object {
  display: block; /* 1 */
  vertical-align: middle; /* 2 */
}

/*
Constrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)
*/

img,
video {
  max-width: 100%;
  height: auto;
}

/* Make elements with the HTML hidden attribute stay hidden by default */
[hidden] {
  display: none;
}

*, ::before, ::after {
  --tw-border-spacing-x: 0;
  --tw-border-spacing-y: 0;
  --tw-translate-x: 0;
  --tw-translate-y: 0;
  --tw-rotate: 0;
  --tw-skew-x: 0;
  --tw-skew-y: 0;
  --tw-scale-x: 1;
  --tw-scale-y: 1;
  --tw-pan-x:  ;
  --tw-pan-y:  ;
  --tw-pinch-zoom:  ;
  --tw-scroll-snap-strictness: proximity;
  --tw-gradient-from-position:  ;
  --tw-gradient-via-position:  ;
  --tw-gradient-to-position:  ;
  --tw-ordinal:  ;
  --tw-slashed-zero:  ;
  --tw-numeric-figure:  ;
  --tw-numeric-spacing:  ;
  --tw-numeric-fraction:  ;
  --tw-ring-inset:  ;
  --tw-ring-offset-width: 0px;
  --tw-ring-offset-color: #fff;
  --tw-ring-color: rgb(59 130 246 / 0.5);
  --tw-ring-offset-shadow: 0 0 #0000;
  --tw-ring-shadow: 0 0 #0000;
  --tw-shadow: 0 0 #0000;
  --tw-shadow-colored: 0 0 #0000;
  --tw-blur:  ;
  --tw-brightness:  ;
  --tw-contrast:  ;
  --tw-grayscale:  ;
  --tw-hue-rotate:  ;
  --tw-invert:  ;
  --tw-saturate:  ;
  --tw-sepia:  ;
  --tw-drop-shadow:  ;
  --tw-backdrop-blur:  ;
  --tw-backdrop-brightness:  ;
  --tw-backdrop-contrast:  ;
  --tw-backdrop-grayscale:  ;
  --tw-backdrop-hue-rotate:  ;
  --tw-backdrop-invert:  ;
  --tw-backdrop-opacity:  ;
  --tw-backdrop-saturate:  ;
  --tw-backdrop-sepia:  ;
}

::backdrop {
  --tw-border-spacing-x: 0;
  --tw-border-spacing-y: 0;
  --tw-translate-x: 0;
  --tw-translate-y: 0;
  --tw-rotate: 0;
  --tw-skew-x: 0;
  --tw-skew-y: 0;
  --tw-scale-x: 1;
  --tw-scale-y: 1;
  --tw-pan-x:  ;
  --tw-pan-y:  ;
  --tw-pinch-zoom:  ;
  --tw-scroll-snap-strictness: proximity;
  --tw-gradient-from-position:  ;
  --tw-gradient-via-position:  ;
  --tw-gradient-to-position:  ;
  --tw-ordinal:  ;
  --tw-slashed-zero:  ;
  --tw-numeric-figure:  ;
  --tw-numeric-spacing:  ;
  --tw-numeric-fraction:  ;
  --tw-ring-inset:  ;
  --tw-ring-offset-width: 0px;
  --tw-ring-offset-color: #fff;
  --tw-ring-color: rgb(59 130 246 / 0.5);
  --tw-ring-offset-shadow: 0 0 #0000;
  --tw-ring-shadow: 0 0 #0000;
  --tw-shadow: 0 0 #0000;
  --tw-shadow-colored: 0 0 #0000;
  --tw-blur:  ;
  --tw-brightness:  ;
  --tw-contrast:  ;
  --tw-grayscale:  ;
  --tw-hue-rotate:  ;
  --tw-invert:  ;
  --tw-saturate:  ;
  --tw-sepia:  ;
  --tw-drop-shadow:  ;
  --tw-backdrop-blur:  ;
  --tw-backdrop-brightness:  ;
  --tw-backdrop-contrast:  ;
  --tw-backdrop-grayscale:  ;
  --tw-backdrop-hue-rotate:  ;
  --tw-backdrop-invert:  ;
  --tw-backdrop-opacity:  ;
  --tw-backdrop-saturate:  ;
  --tw-backdrop-sepia:  ;
}
.fixed {
  position: fixed;
}
.absolute {
  position: absolute;
}
.relative {
  position: relative;
}
.sticky {
  position: sticky;
}
.inset-x-0 {
  left: 0px;
  right: 0px;
}
.inset-y-0 {
  top: 0px;
  bottom: 0px;
}
.bottom-0 {
  bottom: 0px;
}
.left-0 {
  left: 0px;
}
.left-2 {
  left: 0.5rem;
}
.right-0 {
  right: 0px;
}
.right-1 {
  right: 0.25rem;
}
.top-0 {
  top: 0px;
}
.top-2 {
  top: 0.5rem;
}
.z-10 {
  z-index: 10;
}
.mx-3 {
  margin-left: 0.75rem;
  margin-right: 0.75rem;
}
.mx-auto {
  margin-left: auto;
  margin-right: auto;
}
.mb-1 {
  margin-bottom: 0.25rem;
}
.mb-1\.5 {
  margin-bottom: 0.375rem;
}
.mb-2 {
  margin-bottom: 0.5rem;
}
.mb-2\.5 {
  margin-bottom: 0.625rem;
}
.mb-4 {
  margin-bottom: 1rem;
}
.mb-\[48px\] {
  margin-bottom: 48px;
}
.mr-1 {
  margin-right: 0.25rem;
}
.mt-2 {
  margin-top: 0.5rem;
}
.mt-20 {
  margin-top: 5rem;
}
.\!inline {
  display: inline !important;
}
.inline {
  display: inline;
}
.flex {
  display: flex;
}
.inline-flex {
  display: inline-flex;
}
.hidden {
  display: none;
}
.h-full {
  height: 100%;
}
.max-h-64 {
  max-height: 16rem;
}
.min-h-\[38px\] {
  min-height: 38px;
}
.w-8 {
  width: 2rem;
}
.w-\[260px\] {
  width: 260px;
}
.w-full {
  width: 100%;
}
.min-w-0 {
  min-width: 0px;
}
.min-w-\[148px\] {
  min-width: 148px;
}
.min-w-\[38px\] {
  min-width: 38px;
}
.max-w-4xl {
  max-width: 56rem;
}
.flex-1 {
  flex: 1 1 0%;
}
.cursor-pointer {
  cursor: pointer;
}
.resize-none {
  resize: none;
}
.resize {
  resize: both;
}
.flex-col {
  flex-direction: column;
}
.flex-wrap {
  flex-wrap: wrap;
}
.items-end {
  align-items: flex-end;
}
.items-center {
  align-items: center;
}
.justify-center {
  justify-content: center;
}
.justify-between {
  justify-content: space-between;
}
.gap-3 {
  gap: 0.75rem;
}
.gap-3\.5 {
  gap: 0.875rem;
}
.space-x-2 > :not([hidden]) ~ :not([hidden]) {
  --tw-space-x-reverse: 0;
  margin-right: calc(0.5rem * var(--tw-space-x-reverse));
  margin-left: calc(0.5rem * calc(1 - var(--tw-space-x-reverse)));
}
.space-x-3 > :not([hidden]) ~ :not([hidden]) {
  --tw-space-x-reverse: 0;
  margin-right: calc(0.75rem * var(--tw-space-x-reverse));
  margin-left: calc(0.75rem * calc(1 - var(--tw-space-x-reverse)));
}
.space-x-6 > :not([hidden]) ~ :not([hidden]) {
  --tw-space-x-reverse: 0;
  margin-right: calc(1.5rem * var(--tw-space-x-reverse));
  margin-left: calc(1.5rem * calc(1 - var(--tw-space-x-reverse)));
}
.space-y-4 > :not([hidden]) ~ :not([hidden]) {
  --tw-space-y-reverse: 0;
  margin-top: calc(1rem * calc(1 - var(--tw-space-y-reverse)));
  margin-bottom: calc(1rem * var(--tw-space-y-reverse));
}
.overflow-hidden {
  overflow: hidden;
}
.overflow-y-auto {
  overflow-y: auto;
}
.whitespace-nowrap {
  white-space: nowrap;
}
.rounded {
  border-radius: 0.25rem;
}
.rounded-lg {
  border-radius: 0.5rem;
}
.rounded-md {
  border-radius: 0.375rem;
}
.rounded-xl {
  border-radius: 0.75rem;
}
.border {
  border-width: 1px;
}
.border-0 {
  border-width: 0px;
}
.border-b {
  border-bottom-width: 1px;
}
.border-t {
  border-top-width: 1px;
}
.border-dotted {
  border-style: dotted;
}
.border-black\/10 {
  border-color: rgb(0 0 0 / 0.1);
}
.border-black\/60 {
  border-color: rgb(0 0 0 / 0.6);
}
.border-gray-200 {
  --tw-border-opacity: 1;
  border-color: rgb(229 231 235 / var(--tw-border-opacity));
}
.border-gray-300 {
  --tw-border-opacity: 1;
  border-color: rgb(209 213 219 / var(--tw-border-opacity));
}
.border-gray-400 {
  --tw-border-opacity: 1;
  border-color: rgb(156 163 175 / var(--tw-border-opacity));
}
.border-transparent {
  border-color: transparent;
}
.bg-gray-100 {
  --tw-bg-opacity: 1;
  background-color: rgb(243 244 246 / var(--tw-bg-opacity));
}
.bg-gray-50 {
  --tw-bg-opacity: 1;
  background-color: rgb(249 250 251 / var(--tw-bg-opacity));
}
.bg-gray-800 {
  --tw-bg-opacity: 1;
  background-color: rgb(31 41 55 / var(--tw-bg-opacity));
}
.bg-gray-900 {
  --tw-bg-opacity: 1;
  background-color: rgb(17 24 39 / var(--tw-bg-opacity));
}
.bg-primary-500 {
  --tw-bg-opacity: 1;
  background-color: rgb(0 185 129 / var(--tw-bg-opacity));
}
.bg-transparent {
  background-color: transparent;
}
.bg-white {
  --tw-bg-opacity: 1;
  background-color: rgb(255 255 255 / var(--tw-bg-opacity));
}
.bg-gradient-to-b {
  background-image: linear-gradient(to bottom, var(--tw-gradient-stops));
}
.bg-gradient-to-l {
  background-image: linear-gradient(to left, var(--tw-gradient-stops));
}
.from-\[rgba\(255\2c 255\2c 255\2c 0\)\] {
  --tw-gradient-from: rgba(255,255,255,0) var(--tw-gradient-from-position);
  --tw-gradient-to: rgba(255, 255, 255, 0) var(--tw-gradient-to-position);
  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);
}
.from-gray-800 {
  --tw-gradient-from: #1f2937 var(--tw-gradient-from-position);
  --tw-gradient-to: rgb(31 41 55 / 0) var(--tw-gradient-to-position);
  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);
}
.from-gray-900 {
  --tw-gradient-from: #111827 var(--tw-gradient-from-position);
  --tw-gradient-to: rgb(17 24 39 / 0) var(--tw-gradient-to-position);
  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);
}
.from-\[13\.94\%\] {
  --tw-gradient-from-position: 13.94%;
}
.to-\[\#fff\] {
  --tw-gradient-to: #fff var(--tw-gradient-to-position);
}
.to-\[54\.73\%\] {
  --tw-gradient-to-position: 54.73%;
}
.p-1 {
  padding: 0.25rem;
}
.p-2 {
  padding: 0.5rem;
}
.p-3 {
  padding: 0.75rem;
}
.px-3 {
  padding-left: 0.75rem;
  padding-right: 0.75rem;
}
.px-4 {
  padding-left: 1rem;
  padding-right: 1rem;
}
.py-1 {
  padding-top: 0.25rem;
  padding-bottom: 0.25rem;
}
.py-1\.5 {
  padding-top: 0.375rem;
  padding-bottom: 0.375rem;
}
.py-2 {
  padding-top: 0.5rem;
  padding-bottom: 0.5rem;
}
.py-2\.5 {
  padding-top: 0.625rem;
  padding-bottom: 0.625rem;
}
.py-20 {
  padding-top: 5rem;
  padding-bottom: 5rem;
}
.py-4 {
  padding-top: 1rem;
  padding-bottom: 1rem;
}
.py-6 {
  padding-top: 1.5rem;
  padding-bottom: 1.5rem;
}
.py-\[1px\] {
  padding-top: 1px;
  padding-bottom: 1px;
}
.pb-48 {
  padding-bottom: 12rem;
}
.pb-6 {
  padding-bottom: 1.5rem;
}
.pr-\[3\.5em\] {
  padding-right: 3.5em;
}
.pt-10 {
  padding-top: 2.5rem;
}
.text-center {
  text-align: center;
}
.text-3xl {
  font-size: 1.875rem;
  line-height: 2.25rem;
}
.text-4xl {
  font-size: 2.25rem;
  line-height: 2.5rem;
}
.text-lg {
  font-size: 1.125rem;
  line-height: 1.75rem;
}
.text-sm {
  font-size: 0.875rem;
  line-height: 1.25rem;
}
.font-bold {
  font-weight: 700;
}
.font-medium {
  font-weight: 500;
}
.leading-\[1\] {
  line-height: 1;
}
.text-\[\#26cf8e\] {
  --tw-text-opacity: 1;
  color: rgb(38 207 142 / var(--tw-text-opacity));
}
.text-black {
  --tw-text-opacity: 1;
  color: rgb(0 0 0 / var(--tw-text-opacity));
}
.text-gray-300 {
  --tw-text-opacity: 1;
  color: rgb(209 213 219 / var(--tw-text-opacity));
}
.text-gray-500 {
  --tw-text-opacity: 1;
  color: rgb(107 114 128 / var(--tw-text-opacity));
}
.text-gray-700 {
  --tw-text-opacity: 1;
  color: rgb(55 65 81 / var(--tw-text-opacity));
}
.text-gray-900 {
  --tw-text-opacity: 1;
  color: rgb(17 24 39 / var(--tw-text-opacity));
}
.text-white {
  --tw-text-opacity: 1;
  color: rgb(255 255 255 / var(--tw-text-opacity));
}
.shadow-\[0_0_15px_rgba\(0\2c 0\2c 0\2c 0\.1\)\] {
  --tw-shadow: 0 0 15px rgba(0,0,0,0.1);
  --tw-shadow-colored: 0 0 15px var(--tw-shadow-color);
  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
}
.shadow-sm {
  --tw-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);
  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
}
.outline-none {
  outline: 2px solid transparent;
  outline-offset: 2px;
}
.outline {
  outline-style: solid;
}
.transition-colors {
  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}
.duration-100 {
  transition-duration: 100ms;
}

html,
body {
    height: 100%;
    font-size: 16px;
}

::-webkit-scrollbar {
    height: 1rem;
    width: 0.5rem;
}

::-webkit-scrollbar:horizontal {
    height: 0.5rem;
    width: 1rem;
}

::-webkit-scrollbar-track {
    background-color: transparent;
    border-radius: 9999px;
}

::-webkit-scrollbar-thumb {
    background-color: rgba(217, 217, 227, 0.8);
    border-color: rgb(255, 255, 255);
    border-radius: 9999px;
    border-width: 1px;
}

::-webkit-scrollbar-thumb:hover {
    background-color: rgb(236, 236, 241);
}

.dark ::-webkit-scrollbar-thumb {
    background-color: rgb(86, 88, 105);
}

.dark ::-webkit-scrollbar-thumb:hover {
    background-color: rgb(172, 172, 190);
}

.animated-underline {
  cursor: url("/images/new-tab.png") 10 10, pointer;
  background-image: linear-gradient(#33333300, #33333300),
      linear-gradient(to right, #34d399, #00b981);
  background-size: 100% 2px, 0 2px;
  background-position: 100% 100%, 0 100%;
  background-repeat: no-repeat;
  transition: 0.3s ease;
  transition-property: background-size, color, background-color, border-color;
}
.animated-underline:hover {
  background-size: 0 2px, 100% 2px;
}
.hover\:border-black\/0:hover {
  border-color: rgb(0 0 0 / 0);
}
.hover\:bg-gray-200:hover {
  --tw-bg-opacity: 1;
  background-color: rgb(229 231 235 / var(--tw-bg-opacity));
}
.hover\:bg-gray-800:hover {
  --tw-bg-opacity: 1;
  background-color: rgb(31 41 55 / var(--tw-bg-opacity));
}
.hover\:bg-primary-600:hover {
  --tw-bg-opacity: 1;
  background-color: rgb(5 150 105 / var(--tw-bg-opacity));
}
.hover\:text-gray-900:hover {
  --tw-text-opacity: 1;
  color: rgb(17 24 39 / var(--tw-text-opacity));
}
.hover\:text-white:hover {
  --tw-text-opacity: 1;
  color: rgb(255 255 255 / var(--tw-text-opacity));
}
.disabled\:bg-transparent:disabled {
  background-color: transparent;
}
.disabled\:text-gray-300:disabled {
  --tw-text-opacity: 1;
  color: rgb(209 213 219 / var(--tw-text-opacity));
}
.disabled\:shadow-none:disabled {
  --tw-shadow: 0 0 #0000;
  --tw-shadow-colored: 0 0 #0000;
  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
}
.group:hover .group-hover\:from-gray-800 {
  --tw-gradient-from: #1f2937 var(--tw-gradient-from-position);
  --tw-gradient-to: rgb(31 41 55 / 0) var(--tw-gradient-to-position);
  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);
}
.group:hover .group-hover\:text-\[\#26cf8e\] {
  --tw-text-opacity: 1;
  color: rgb(38 207 142 / var(--tw-text-opacity));
}
:is(.dark .dark\:border-gray-200) {
  --tw-border-opacity: 1;
  border-color: rgb(229 231 235 / var(--tw-border-opacity));
}
:is(.dark .dark\:border-gray-500) {
  --tw-border-opacity: 1;
  border-color: rgb(107 114 128 / var(--tw-border-opacity));
}
:is(.dark .dark\:border-gray-600) {
  --tw-border-opacity: 1;
  border-color: rgb(75 85 99 / var(--tw-border-opacity));
}
:is(.dark .dark\:border-gray-800\/50) {
  border-color: rgb(31 41 55 / 0.5);
}
:is(.dark .dark\:bg-gray-700) {
  --tw-bg-opacity: 1;
  background-color: rgb(55 65 81 / var(--tw-bg-opacity));
}
:is(.dark .dark\:bg-gray-800) {
  --tw-bg-opacity: 1;
  background-color: rgb(31 41 55 / var(--tw-bg-opacity));
}
:is(.dark .dark\:bg-gray-900) {
  --tw-bg-opacity: 1;
  background-color: rgb(17 24 39 / var(--tw-bg-opacity));
}
:is(.dark .dark\:from-\[rgba\(53\2c 55\2c 64\2c 0\)\]) {
  --tw-gradient-from: rgba(53,55,64,0) var(--tw-gradient-from-position);
  --tw-gradient-to: rgba(53, 55, 64, 0) var(--tw-gradient-to-position);
  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);
}
:is(.dark .dark\:to-\[\#353740\]) {
  --tw-gradient-to: #353740 var(--tw-gradient-to-position);
}
:is(.dark .dark\:to-\[58\.85\%\]) {
  --tw-gradient-to-position: 58.85%;
}
:is(.dark .dark\:text-gray-100) {
  --tw-text-opacity: 1;
  color: rgb(243 244 246 / var(--tw-text-opacity));
}
:is(.dark .dark\:text-gray-300) {
  --tw-text-opacity: 1;
  color: rgb(209 213 219 / var(--tw-text-opacity));
}
:is(.dark .dark\:text-white) {
  --tw-text-opacity: 1;
  color: rgb(255 255 255 / var(--tw-text-opacity));
}
:is(.dark .dark\:hover\:border-gray-200\/0:hover) {
  border-color: rgb(229 231 235 / 0);
}
:is(.dark .dark\:hover\:bg-gray-200:hover) {
  --tw-bg-opacity: 1;
  background-color: rgb(229 231 235 / var(--tw-bg-opacity));
}
:is(.dark .dark\:hover\:bg-gray-700:hover) {
  --tw-bg-opacity: 1;
  background-color: rgb(55 65 81 / var(--tw-bg-opacity));
}
:is(.dark .dark\:hover\:bg-gray-900:hover) {
  --tw-bg-opacity: 1;
  background-color: rgb(17 24 39 / var(--tw-bg-opacity));
}
:is(.dark .dark\:disabled\:text-gray-600:disabled) {
  --tw-text-opacity: 1;
  color: rgb(75 85 99 / var(--tw-text-opacity));
}
/*!*****************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[12].oneOf[12].use[2]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[12].oneOf[12].use[3]!./styles/markdown.css ***!
  \*****************************************************************************************************************************************************************************************************************************************************************/

    .markdown {
        position: relative;
        max-width: none;
    }
    .markdown h1,
    .markdown h2 {
        font-weight: 600;
    }
    .markdown h2 {
        margin-bottom: 1rem;
        margin-top: 2rem;
    }
    .markdown h3 {
        font-weight: 600;
    }
    .markdown h3,
    .markdown h4 {
        margin-bottom: 0.5rem;
        margin-top: 1rem;
    }
    .markdown h4 {
        font-weight: 400;
    }
    .markdown h5 {
        font-weight: 600;
    }
    .markdown blockquote {
        --tw-border-opacity: 1;
        border-color: rgba(142, 142, 160, var(--tw-border-opacity));
        border-left-width: 2px;
        line-height: 1.5rem;
        margin: 0;
        padding-bottom: 0.5rem;
        padding-left: 1rem;
        padding-top: 0.5rem;
    }
    .markdown blockquote > p {
        margin: 0;
    }
    .markdown blockquote > p:after,
    .markdown blockquote > p:before {
        display: none;
    }
    .markdown ol {
        counter-reset: list-number;
        display: flex;
        flex-direction: column;
        list-style-type: none;
        padding-left: 0;
    }
    .markdown ol > li {
        counter-increment: list-number;
        display: block;
        margin-bottom: 0;
        margin-top: 0;
        min-height: 28px;
    }
    .markdown ol > li:before {
        --tw-translate-x: -100%;
        --tw-text-opacity: 1;
        color: rgba(142, 142, 160, var(--tw-text-opacity));
        content: counters(list-number, ".") ".";
        padding-right: 0.5rem;
        position: absolute;
        transform: translate(var(--tw-translate-x), var(--tw-translate-y))
            rotate(var(--tw-rotate)) skewX(var(--tw-skew-x))
            skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))
            scaleY(var(--tw-scale-y));
    }
    :is(.dark .markdown ol > li):before {
        --tw-text-opacity: 1;
        color: rgba(172, 172, 190, var(--tw-text-opacity));
    }
    .markdown ul {
        display: flex;
        flex-direction: column;
        padding-left: 0;
    }
    .markdown ul > li {
        display: block;
        margin: 0;
        min-height: 28px;
    }
    .markdown ul > li:before {
        --tw-translate-x: -100%;
        content: "•";
        font-size: 0.875rem;
        line-height: 1.25rem;
        padding-right: 0.5rem;
        position: absolute;
        transform: translate(var(--tw-translate-x), var(--tw-translate-y))
            rotate(var(--tw-rotate)) skewX(var(--tw-skew-x))
            skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x))
            scaleY(var(--tw-scale-y));
    }
    .markdown ol li > p,
    .markdown ul li > p {
        margin: 0;
    }

    .markdown ol li > pre,
    .markdown ul li > pre {
        margin: 0.5em 0;
    }
    .markdown ol ol,
    .markdown ol ul,
    .markdown ul ol,
    .markdown ul ul {
        margin-bottom: 0;
        margin-left: 1rem;
        margin-top: 0;
    }
    .markdown table {
        --tw-border-spacing-x: 0px;
        --tw-border-spacing-y: 0px;
        border-collapse: separate;
        border-spacing: var(--tw-border-spacing-x) var(--tw-border-spacing-y);
        width: 100%;
    }
    .markdown th {
        border-color: var(--tw-prose-th-borders);
        background-color: var(--tw-prose-th-bg);
        border-bottom-width: 1px;
        border-left-width: 1px;
        border-top-width: 1px;
        padding: 0.25rem 0.75rem;
    }
    .markdown th:first-child {
        border-top-left-radius: 0.375rem;
    }
    .markdown th:last-child {
        border-right-width: 1px;
        border-top-right-radius: 0.375rem;
    }
    .markdown td {
        border-color: var(--tw-prose-td-borders);
        border-bottom-width: 1px;
        border-left-width: 1px;
        padding: 0.25rem 0.75rem;
    }
    .markdown td:last-child {
        border-right-width: 1px;
    }
    .markdown tbody tr:last-child td:first-child {
        border-bottom-left-radius: 0.375rem;
    }
    .markdown tbody tr:last-child td:last-child {
        border-bottom-right-radius: 0.375rem;
    }
    .markdown a {
        text-decoration-line: underline;
        text-underline-offset: 2px;
    }

    .prose {
        color: var(--tw-prose-body);
    }
    .prose :where([class~="lead"]):not(:where([class~="not-prose"] *)) {
        color: var(--tw-prose-lead);
        font-size: 1.25em;
        line-height: 1.6;
        margin-bottom: 1.2em;
        margin-top: 1.2em;
    }
    .prose :where(a):not(:where([class~="not-prose"] *)) {
        color: var(--tw-prose-links);
        font-weight: 500;
        text-decoration: underline;
    }
    .prose :where(strong):not(:where([class~="not-prose"] *)) {
        color: var(--tw-prose-bold);
        font-weight: 600;
    }
    .prose :where(a strong):not(:where([class~="not-prose"] *)) {
        color: inherit;
    }
    .prose :where(blockquote strong):not(:where([class~="not-prose"] *)) {
        color: inherit;
    }
    .prose :where(thead th strong):not(:where([class~="not-prose"] *)) {
        color: inherit;
    }
    .prose :where(ol):not(:where([class~="not-prose"] *)) {
        list-style-type: decimal;
        margin-bottom: 1.25em;
        margin-top: 1.25em;
        padding-left: 1.625em;
    }
    .prose :where(ol[type="A"]):not(:where([class~="not-prose"] *)) {
        list-style-type: upper-alpha;
    }
    .prose :where(ol[type="a"]):not(:where([class~="not-prose"] *)) {
        list-style-type: lower-alpha;
    }
    .prose :where(ol[type="A s"]):not(:where([class~="not-prose"] *)) {
        list-style-type: upper-alpha;
    }
    .prose :where(ol[type="a s"]):not(:where([class~="not-prose"] *)) {
        list-style-type: lower-alpha;
    }
    .prose :where(ol[type="I"]):not(:where([class~="not-prose"] *)) {
        list-style-type: upper-roman;
    }
    .prose :where(ol[type="i"]):not(:where([class~="not-prose"] *)) {
        list-style-type: lower-roman;
    }
    .prose :where(ol[type="I s"]):not(:where([class~="not-prose"] *)) {
        list-style-type: upper-roman;
    }
    .prose :where(ol[type="i s"]):not(:where([class~="not-prose"] *)) {
        list-style-type: lower-roman;
    }
    .prose :where(ol[type="1"]):not(:where([class~="not-prose"] *)) {
        list-style-type: decimal;
    }
    .prose :where(ul):not(:where([class~="not-prose"] *)) {
        list-style-type: disc;
        margin-bottom: 1.25em;
        margin-top: 1.25em;
        padding-left: 1.625em;
    }
    .prose :where(ol > li):not(:where([class~="not-prose"] *))::marker {
        color: var(--tw-prose-counters);
        font-weight: 400;
    }
    .prose :where(ul > li):not(:where([class~="not-prose"] *))::marker {
        color: var(--tw-prose-bullets);
    }
    .prose :where(hr):not(:where([class~="not-prose"] *)) {
        border-color: var(--tw-prose-hr);
        border-top-width: 1px;
        margin-bottom: 1em;
        margin-top: 1em;
    }
    .prose :where(blockquote):not(:where([class~="not-prose"] *)) {
        border-left-color: var(--tw-prose-quote-borders);
        border-left-width: 0.25rem;
        color: var(--tw-prose-quotes);
        font-style: italic;
        font-style: normal;
        font-weight: 500;
        margin-bottom: 1.6em;
        margin-top: 1.6em;
        padding-left: 1em;
        quotes: "\201C""\201D""\2018""\2019";
    }
    .prose
        :where(blockquote p:first-of-type):not(
            :where([class~="not-prose"] *)
        ):before {
        content: open-quote;
    }
    .prose
        :where(blockquote p:last-of-type):not(
            :where([class~="not-prose"] *)
        ):after {
        content: close-quote;
    }
    .prose :where(h1):not(:where([class~="not-prose"] *)) {
        color: var(--tw-prose-headings);
        font-size: 2.25em;
        font-weight: 800;
        line-height: 1.1111111;
        margin-bottom: 0.8888889em;
        margin-top: 0;
    }
    .prose :where(h1 strong):not(:where([class~="not-prose"] *)) {
        color: inherit;
        font-weight: 900;
    }
    .prose :where(h2):not(:where([class~="not-prose"] *)) {
        color: var(--tw-prose-headings);
        font-size: 1.5em;
        font-weight: 700;
        line-height: 1.3333333;
        margin-bottom: 1em;
        margin-top: 2em;
    }
    .prose :where(h2 strong):not(:where([class~="not-prose"] *)) {
        color: inherit;
        font-weight: 800;
    }
    .prose :where(h3):not(:where([class~="not-prose"] *)) {
        color: var(--tw-prose-headings);
        font-size: 1.25em;
        font-weight: 600;
        line-height: 1.6;
        margin-bottom: 0.6em;
        margin-top: 1.6em;
    }
    .prose :where(h3 strong):not(:where([class~="not-prose"] *)) {
        color: inherit;
        font-weight: 700;
    }
    .prose :where(h4):not(:where([class~="not-prose"] *)) {
        color: var(--tw-prose-headings);
        font-weight: 600;
        line-height: 1.5;
        margin-bottom: 0.5em;
        margin-top: 1.5em;
    }
    .prose :where(h4 strong):not(:where([class~="not-prose"] *)) {
        color: inherit;
        font-weight: 700;
    }
    .prose :where(img):not(:where([class~="not-prose"] *)) {
        margin-bottom: 2em;
        margin-top: 2em;
    }
    .prose :where(figure > *):not(:where([class~="not-prose"] *)) {
        margin-bottom: 0;
        margin-top: 0;
    }
    .prose :where(figcaption):not(:where([class~="not-prose"] *)) {
        color: var(--tw-prose-captions);
        font-size: 0.875em;
        line-height: 1.4285714;
        margin-top: 0.8571429em;
    }
    .prose :where(code):not(:where([class~="not-prose"] *)) {
        color: var(--tw-prose-code);
        font-size: 0.875em;
        font-weight: 600;
    }
    .prose :where(code):not(:where([class~="not-prose"] *)):before {
        content: "`";
    }
    .prose :where(code):not(:where([class~="not-prose"] *)):after {
        content: "`";
    }
    .prose :where(a code):not(:where([class~="not-prose"] *)) {
        color: inherit;
    }
    .prose :where(h1 code):not(:where([class~="not-prose"] *)) {
        color: inherit;
    }
    .prose :where(h2 code):not(:where([class~="not-prose"] *)) {
        color: inherit;
        font-size: 0.875em;
    }
    .prose :where(h3 code):not(:where([class~="not-prose"] *)) {
        color: inherit;
        font-size: 0.9em;
    }
    .prose :where(h4 code):not(:where([class~="not-prose"] *)) {
        color: inherit;
    }
    .prose :where(blockquote code):not(:where([class~="not-prose"] *)) {
        color: inherit;
    }
    .prose :where(thead th code):not(:where([class~="not-prose"] *)) {
        color: inherit;
    }
    .prose :where(pre):not(:where([class~="not-prose"] *)) {
        background-color: transparent;
        border-radius: 0.375rem;
        color: currentColor;
        font-size: 0.875em;
        font-weight: 400;
        line-height: 1.7142857;
        margin: 0;
        overflow-x: auto;
        padding: 0;
    }
    .prose :where(pre code):not(:where([class~="not-prose"] *)) {
        background-color: transparent;
        border-radius: 0;
        border-width: 0;
        color: inherit;
        font-family: inherit;
        font-size: inherit;
        font-weight: inherit;
        line-height: inherit;
        padding: 0;
    }
    .prose :where(pre code):not(:where([class~="not-prose"] *)):before {
        content: none;
    }
    .prose :where(pre code):not(:where([class~="not-prose"] *)):after {
        content: none;
    }
    .prose :where(table):not(:where([class~="not-prose"] *)) {
        font-size: 0.875em;
        line-height: 1.7142857;
        margin-bottom: 2em;
        margin-top: 2em;
        table-layout: auto;
        text-align: left;
        width: 100%;
    }
    .prose :where(thead):not(:where([class~="not-prose"] *)) {
        border-bottom-color: var(--tw-prose-th-borders);
        border-bottom-width: 1px;
    }
    .prose :where(thead th):not(:where([class~="not-prose"] *)) {
        border-bottom-color: var(--tw-prose-th-borders);
        color: var(--tw-prose-headings);
        font-weight: 600;
        padding-bottom: 0.5714286em;
        padding-left: 0.5714286em;
        padding-right: 0.5714286em;
        vertical-align: bottom;
    }
    .prose :where(tbody tr):not(:where([class~="not-prose"] *)) {
        border-bottom-color: var(--tw-prose-td-borders);
        border-bottom-width: 1px;
    }
    .prose :where(tbody tr:last-child):not(:where([class~="not-prose"] *)) {
        border-bottom-width: 0;
    }
    .prose :where(tbody td):not(:where([class~="not-prose"] *)) {
        vertical-align: baseline;
    }
    .prose :where(tfoot):not(:where([class~="not-prose"] *)) {
        border-top-color: var(--tw-prose-th-borders);
        border-top-width: 1px;
    }
    .prose :where(tfoot td):not(:where([class~="not-prose"] *)) {
        vertical-align: top;
    }
    .prose {
        --tw-prose-body: #374151;
        --tw-prose-headings: #111827;
        --tw-prose-lead: #4b5563;
        --tw-prose-links: #111827;
        --tw-prose-bold: #111827;
        --tw-prose-counters: #6b7280;
        --tw-prose-bullets: #d1d5db;
        --tw-prose-hr: #e5e7eb;
        --tw-prose-quotes: #111827;
        --tw-prose-quote-borders: #e5e7eb;
        --tw-prose-captions: #6b7280;
        --tw-prose-code: #111827;
        --tw-prose-pre-code: #e5e7eb;
        --tw-prose-pre-bg: #1f2937;
        --tw-prose-th-bg: rgba(236, 236, 241, 0.2);
        --tw-prose-th-borders: #d1d5db;
        --tw-prose-td-borders: #e5e7eb;
        --tw-prose-invert-body: #d1d5db;
        --tw-prose-invert-headings: #fff;
        --tw-prose-invert-lead: #9ca3af;
        --tw-prose-invert-links: #fff;
        --tw-prose-invert-bold: #fff;
        --tw-prose-invert-counters: #9ca3af;
        --tw-prose-invert-bullets: #4b5563;
        --tw-prose-invert-hr: #374151;
        --tw-prose-invert-quotes: #f3f4f6;
        --tw-prose-invert-quote-borders: #374151;
        --tw-prose-invert-captions: #9ca3af;
        --tw-prose-invert-code: #fff;
        --tw-prose-invert-pre-code: #d1d5db;
        --tw-prose-invert-pre-bg: rgba(0, 0, 0, 0.5);
        --tw-prose-invert-th-bg: rgba(236, 236, 241, 0.1);
        --tw-prose-invert-th-borders: #4b5563;
        --tw-prose-invert-td-borders: #374151;
        line-height: 1.75;
    }
    .prose :where(p):not(:where([class~="not-prose"] *)) {
        margin-bottom: 1.25em;
        margin-top: 1.25em;
    }
    .prose :where(video):not(:where([class~="not-prose"] *)) {
        margin-bottom: 2em;
        margin-top: 2em;
    }
    .prose :where(figure):not(:where([class~="not-prose"] *)) {
        margin-bottom: 2em;
        margin-top: 2em;
    }
    .prose :where(li):not(:where([class~="not-prose"] *)) {
        margin-bottom: 0.5em;
        margin-top: 0.5em;
    }
    .prose :where(ol > li):not(:where([class~="not-prose"] *)) {
        padding-left: 0.375em;
    }
    .prose :where(ul > li):not(:where([class~="not-prose"] *)) {
        padding-left: 0.375em;
    }
    .prose :where(.prose > ul > li p):not(:where([class~="not-prose"] *)) {
        margin-bottom: 0.75em;
        margin-top: 0.75em;
    }
    .prose
        :where(.prose > ul > li > :first-child):not(
            :where([class~="not-prose"] *)
        ) {
        margin-top: 1.25em;
    }
    .prose
        :where(.prose > ul > li > :last-child):not(
            :where([class~="not-prose"] *)
        ) {
        margin-bottom: 1.25em;
    }
    .prose
        :where(.prose > ol > li > :first-child):not(
            :where([class~="not-prose"] *)
        ) {
        margin-top: 1.25em;
    }
    .prose
        :where(.prose > ol > li > :last-child):not(
            :where([class~="not-prose"] *)
        ) {
        margin-bottom: 1.25em;
    }
    .prose
        :where(ul ul, ul ol, ol ul, ol ol):not(:where([class~="not-prose"] *)) {
        margin-bottom: 0.75em;
        margin-top: 0.75em;
    }
    .prose :where(hr + *):not(:where([class~="not-prose"] *)) {
        margin-top: 0;
    }
    .prose :where(h2 + *):not(:where([class~="not-prose"] *)) {
        margin-top: 0;
    }
    .prose :where(h3 + *):not(:where([class~="not-prose"] *)) {
        margin-top: 0;
    }
    .prose :where(h4 + *):not(:where([class~="not-prose"] *)) {
        margin-top: 0;
    }
    .prose :where(thead th:first-child):not(:where([class~="not-prose"] *)) {
        padding-left: 0;
    }
    .prose :where(thead th:last-child):not(:where([class~="not-prose"] *)) {
        padding-right: 0;
    }
    .prose :where(tbody td, tfoot td):not(:where([class~="not-prose"] *)) {
        padding: 0.5714286em;
    }
    .prose
        :where(tbody td:first-child, tfoot td:first-child):not(
            :where([class~="not-prose"] *)
        ) {
        padding-left: 0;
    }
    .prose
        :where(tbody td:last-child, tfoot td:last-child):not(
            :where([class~="not-prose"] *)
        ) {
        padding-right: 0;
    }
    .prose :where(.prose > :first-child):not(:where([class~="not-prose"] *)) {
        margin-top: 0;
    }
    .prose :where(.prose > :last-child):not(:where([class~="not-prose"] *)) {
        margin-bottom: 0;
    }

    .dark .dark\:prose-invert {
        --tw-prose-body: var(--tw-prose-invert-body);
        --tw-prose-headings: var(--tw-prose-invert-headings);
        --tw-prose-lead: var(--tw-prose-invert-lead);
        --tw-prose-links: var(--tw-prose-invert-links);
        --tw-prose-bold: var(--tw-prose-invert-bold);
        --tw-prose-counters: var(--tw-prose-invert-counters);
        --tw-prose-bullets: var(--tw-prose-invert-bullets);
        --tw-prose-hr: var(--tw-prose-invert-hr);
        --tw-prose-quotes: var(--tw-prose-invert-quotes);
        --tw-prose-quote-borders: var(--tw-prose-invert-quote-borders);
        --tw-prose-captions: var(--tw-prose-invert-captions);
        --tw-prose-code: var(--tw-prose-invert-code);
        --tw-prose-pre-code: var(--tw-prose-invert-pre-code);
        --tw-prose-pre-bg: var(--tw-prose-invert-pre-bg);
        --tw-prose-th-bg: var(--tw-prose-invert-th-bg);
        --tw-prose-th-borders: var(--tw-prose-invert-th-borders);
        --tw-prose-td-borders: var(--tw-prose-invert-td-borders);
    }

:is(.dark .dark\:prose-invert) {
        --tw-prose-body: var(--tw-prose-invert-body);
        --tw-prose-headings: var(--tw-prose-invert-headings);
        --tw-prose-lead: var(--tw-prose-invert-lead);
        --tw-prose-links: var(--tw-prose-invert-links);
        --tw-prose-bold: var(--tw-prose-invert-bold);
        --tw-prose-counters: var(--tw-prose-invert-counters);
        --tw-prose-bullets: var(--tw-prose-invert-bullets);
        --tw-prose-hr: var(--tw-prose-invert-hr);
        --tw-prose-quotes: var(--tw-prose-invert-quotes);
        --tw-prose-quote-borders: var(--tw-prose-invert-quote-borders);
        --tw-prose-captions: var(--tw-prose-invert-captions);
        --tw-prose-code: var(--tw-prose-invert-code);
        --tw-prose-pre-code: var(--tw-prose-invert-pre-code);
        --tw-prose-pre-bg: var(--tw-prose-invert-pre-bg);
        --tw-prose-th-bg: var(--tw-prose-invert-th-bg);
        --tw-prose-th-borders: var(--tw-prose-invert-th-borders);
        --tw-prose-td-borders: var(--tw-prose-invert-td-borders);
    }
